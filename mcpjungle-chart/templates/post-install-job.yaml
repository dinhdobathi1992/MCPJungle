apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "mcpjungle.fullname" . }}-register-mcp-servers
  labels:
    {{- include "mcpjungle.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        {{- include "mcpjungle.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: register-mcp-servers
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ include "mcpjungle.serviceAccountName" . }}
      containers:
        - name: register-mcp-servers
          image: "alpine:latest"
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Install required packages
              apk add --no-cache curl tar
              
              # Wait for MCPJungle server to be ready
              echo "Waiting for MCPJungle server to be ready..."
              until curl -s http://{{ include "mcpjungle.fullname" . }}:{{ .Values.service.port }}/health > /dev/null 2>&1; do
                echo "MCPJungle server not ready yet, waiting..."
                sleep 5
              done
              
              # Download MCPJungle binary
              echo "Downloading MCPJungle binary..."
              echo "Architecture: $(uname -m)"
              
              # Download correct tar.gz based on architecture
              if [ "$(uname -m)" = "aarch64" ] || [ "$(uname -m)" = "arm64" ]; then
                echo "Detected ARM64 architecture, downloading ARM64 package..."
                curl -L -o /tmp/mcpjungle.tar.gz https://github.com/mcpjungle/MCPJungle/releases/download/0.2.1/MCPJungle_Linux_arm64.tar.gz
              else
                echo "Detected x86_64 architecture, downloading x86_64 package..."
                curl -L -o /tmp/mcpjungle.tar.gz https://github.com/mcpjungle/MCPJungle/releases/download/0.2.1/MCPJungle_Linux_x86_64.tar.gz
              fi
              
              # Extract the tar.gz
              echo "Extracting MCPJungle binary..."
              tar -xzf /tmp/mcpjungle.tar.gz -C /tmp
              
              # Find the binary in the extracted files
              if [ -f /tmp/mcpjungle ]; then
                echo "Found binary at /tmp/mcpjungle"
              elif [ -f /tmp/MCPJungle ]; then
                mv /tmp/MCPJungle /tmp/mcpjungle
                echo "Found binary at /tmp/MCPJungle, moved to /tmp/mcpjungle"
              else
                echo "ERROR: Could not find MCPJungle binary after extraction"
                ls -la /tmp/
                exit 1
              fi
              
              chmod +x /tmp/mcpjungle
              
              # Test the binary
              echo "Testing binary..."
              /tmp/mcpjungle --version || /tmp/mcpjungle version || echo "Binary test completed"
              
              # Test connection first
              echo "Testing connection to MCPJungle server..."
              if /tmp/mcpjungle list tools --registry http://{{ include "mcpjungle.fullname" . }}:{{ .Values.service.port }}; then
                echo "Connection test successful"
              else
                echo "Connection test failed, but continuing..."
              fi
              
              # # Register MCP servers using CLI commands
              echo "Registering MCP servers..."
              cd /etc/mcpjungle/mcp-servers
              for file in *.json; do
                if [ -f "$file" ]; then
                  echo "Registering MCP server from $file..."
                  # Use MCPJungle CLI to register with the running server
                  /tmp/mcpjungle register -c "$file" --registry http://{{ include "mcpjungle.fullname" . }}:{{ .Values.service.port }}
                  if [ $? -eq 0 ]; then
                    echo "Successfully registered MCP server from $file"
                  else
                    echo "Failed to register MCP server from $file"
                    exit 1
                  fi
                fi
               done
              
              # Verify registration
              echo "Verifying registered servers..."
              /tmp/mcpjungle list servers --registry http://{{ include "mcpjungle.fullname" . }}:{{ .Values.service.port }}
              
              echo "All MCP servers registered successfully!"
          volumeMounts:
            - name: mcp-servers-config
              mountPath: /etc/mcpjungle/mcp-servers
      volumes:
        - name: mcp-servers-config
          configMap:
            name: {{ include "mcpjungle.fullname" . }}-mcp-servers
